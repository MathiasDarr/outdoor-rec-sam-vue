AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'query-ap Sample SAM Template for query-api

  '
Parameters:
  DynamoEndpoint:
    Type: String
    Default: cloud
    AllowedValues:
    - http://dynamo-local:8000
    - cloud
    Description: http://dynamo-local:8000, cloud
Globals:
  Function:
    Timeout: 3
Resources:
  ProductsApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Name: ProductsApi
      DefinitionUri: s3://dakobed-serverless-apis/a8159b89a82dbd73c8448a0802bf85bc
  GetCategoriesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetCategoriesFunction
      CodeUri: s3://dakobed-serverless-apis/9deb088f8056923cdcba337024e9f0b9
      Handler: app.lambda_handler
      Runtime: python3.7
      Environment:
        Variables:
          dynamo_endpoint:
            Ref: DynamoEndpoint
      Policies:
      - DynamoDBReadPolicy:
          TableName: Categories
      Events:
        VendorQuery:
          Type: Api
          Properties:
            RestApiId:
              Ref: ProductsApi
            Path: /categories
            Method: get
  VendorQueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: VendorQueryFunction
      CodeUri: s3://dakobed-serverless-apis/77fb0dc20dce310c5cdee61a25b46f19
      Handler: app.lambda_handler
      Runtime: python3.7
      Environment:
        Variables:
          dynamo_endpoint:
            Ref: DynamoEndpoint
      Policies:
      - DynamoDBReadPolicy:
          TableName: Products
      Events:
        VendorQuery:
          Type: Api
          Properties:
            RestApiId:
              Ref: ProductsApi
            Path: /products/vendor/{vendor_id}
            Method: get
  CategoryQueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CategoryQueryFunction
      CodeUri: s3://dakobed-serverless-apis/889d5f480d0733d93330db8ea099ae46
      Handler: app.lambda_handler
      Runtime: python3.7
      Environment:
        Variables:
          dynamo_endpoint:
            Ref: DynamoEndpoint
      Policies:
      - DynamoDBReadPolicy:
          TableName: Products
      Events:
        VendorQuery:
          Type: Api
          Properties:
            RestApiId:
              Ref: ProductsApi
            Path: /products/category/{category}
            Method: get
  VendorCategoryQueryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: VendorCategoryQueryFunction
      CodeUri: s3://dakobed-serverless-apis/d9991fe0ea4d28bbbbd9e75446009f37
      Handler: app.lambda_handler
      Runtime: python3.7
      Environment:
        Variables:
          dynamo_endpoint:
            Ref: DynamoEndpoint
      Policies:
      - DynamoDBReadPolicy:
          TableName: Products
      Events:
        VendorQuery:
          Type: Api
          Properties:
            RestApiId:
              Ref: ProductsApi
            Path: /products/vendor/{vendor}/{category}
            Method: get
  ProductsScanFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ProductsScanFunction
      CodeUri: s3://dakobed-serverless-apis/394089515b730b476be3c64f28156eb4
      Handler: app.lambda_handler
      Runtime: python3.7
      Policies:
      - DynamoDBReadPolicy:
          TableName: Products
      Events:
        ProductsQuery:
          Type: Api
          Properties:
            RestApiId:
              Ref: ProductsApi
            Path: /products
            Method: get
  ProductDetailFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ProductDetailFunction
      CodeUri: s3://dakobed-serverless-apis/853f9f4b8f46f9fe45fd0fedbac3f589
      Handler: app.lambda_handler
      Runtime: python3.7
      Policies:
      - DynamoDBReadPolicy:
          TableName: Products
      Events:
        ProductsQuery:
          Type: Api
          Properties:
            RestApiId:
              Ref: ProductsApi
            Path: /products/{vendor}/{productName}
            Method: get
Outputs:
  ProductsApi:
    Value:
      Fn::Sub: https://${ProductsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod
    Export:
      Name:
        Fn::Join:
        - ':'
        - - Ref: AWS::StackName
          - ProductsApi
