swagger: "2.0"
info:
  description: "Serverless API"
  version: "1.0.0"
  title: "Dakobed Outdoor Recreation Equipment Service"

securityDefinitions:
  cognitoUserPool:
    type: oauth2,
    name: "Authorization"
    in: header
    x-amazon-apigateway-authtype: cognito_user_pools
    x-amazon-apigateway-authorizer:
      type: cognito_user_pools
      providerARNs:
        - arn:aws:cognito-idp:us-west-2:710339184759:userpool/us-west-2_Ekgyre2tA

basePath: "/v1"
schemes:
  - "https"
paths:
  /orders/{customerID}:
    options:
      responses:
        200:
          description: "Success"
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
          schema:
            $ref: "#/definitions/Empty"
      x-amazon-apigateway-integration:
        type: "mock"
        httpMethod: "POST"
        requestTemplates:
          "application/json": "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
    get:
      tags:
        - "products"
      summary: "return snotel data by location ID"
      description: "Returns snotel data for a single location over range of dates specified by query params"
      operationId: "getSnotelByLocation"
      produces:
        - "application/json"

      parameters:
        - name: "customerID"
          in: "path"
          description: "ID of vendor "
          required: true
          type: "string"

      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: string
      # For AWS Integration
      x-amazon-apigateway-request-validators:
        basic:
          validateRequestParameters: true
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        # Replace AWS_REGION and ACCOUNT_ID in uri
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:710339184759:function:CustomersOrdersFunction/invocations"
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\r\n  \"method\": \"$context.httpMethod\",\r\n  \"body\" : \"$input.body\",\r\n  \"headers\": {\r\n    #foreach($param in $input.params().header.keySet())\r\n    \"$param\": \"$util.escapeJavaScript($input.params().header.get($param))\" #if($foreach.hasNext),#end\r\n\r\n    #end\r\n  },\r\n  \"queryParameters\": {\r\n    #foreach($param in $input.params().querystring.keySet())\r\n    \"$param\": \"$util.escapeJavaScript($input.params().querystring.get($param))\" #if($foreach.hasNext),#end\r\n\r\n    #end\r\n  },\r\n  \"pathParameters\": {\r\n    #foreach($param in $input.params().path.keySet())\r\n    \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\" #if($foreach.hasNext),#end\r\n\r\n    #end\r\n  }  \r\n}"

    post:
      tags:
        - "products"
      summary: "return snotel data by location ID"
      description: "Returns snotel data for a single location over range of dates specified by query params"
      operationId: "getSnotelByLocation"
      produces:
        - "application/json"

      parameters:
        - name: "customerID"
          in: "path"
          description: "ID of vendor "
          required: true
          type: "string"

      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: string
      # For AWS Integration
      x-amazon-apigateway-request-validators:
        basic:
          validateRequestParameters: true
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"

        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:710339184759:function:PostOrderFunction/invocations"
#        responses:
#          default:
#            statusCode: 200
#            responseParameters:
#              method.response.header.Access-Control-Allow-Origin: "'*'"
#        passthroughBehavior: "when_no_templates"

#        requestTemplates:
#          application/json: "{\"pathParameters\": {\r\n    #foreach($param in $input.params().path.keySet())\r\n}"
#        requestTemplates:
#          application/json: "{\r\n  \"method\": \"$context.httpMethod\",\r\n  \"body\" : \"$input.body\",\r\n  \"headers\": {\r\n    #foreach($param in $input.params().header.keySet())\r\n    \"$param\": \"$util.escapeJavaScript($input.params().header.get($param))\" #if($foreach.hasNext),#end\r\n\r\n    #end\r\n  },\r\n  \"queryParameters\": {\r\n    #foreach($param in $input.params().querystring.keySet())\r\n    \"$param\": \"$util.escapeJavaScript($input.params().querystring.get($param))\" #if($foreach.hasNext),#end\r\n\r\n    #end\r\n  },\r\n  \"pathParameters\": {\r\n    #foreach($param in $input.params().path.keySet())\r\n    \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\" #if($foreach.hasNext),#end\r\n\r\n    #end\r\n  }  \r\n}"

