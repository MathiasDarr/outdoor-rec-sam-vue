swagger: "2.0"
info:
  description: "Serverless API"
  version: "1.0.0"
  title: "Dakobed Outdoor Recreation Equipment Service"
host: "petstore.com"
basePath: "/v1"
schemes:
- "https"
paths:
  /categories:
    options:
      responses:
        200:
          description: "Success"
          headers:
            Access-Control-Allow-Headers:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Origin:
              type: string
          schema:
            $ref: "#/definitions/Empty"
      x-amazon-apigateway-integration:
        type: "mock"
        httpMethod: "POST"
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
    get:
      tags:
        - "snotel"
      summary: "return snotel data by location ID"
      description: "Returns snotel data for a single location over range of dates specified by query params"
      operationId: "getSnotelByLocation"
      produces:
        - "application/json"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: string
      # For AWS Integration
      x-amazon-apigateway-request-validators:
        basic:
          validateRequestParameters: true
      x-amazon-apigateway-integration:
        type: "aws"
        httpMethod: "POST"
        # Replace AWS_REGION and ACCOUNT_ID in uri
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:710339184759:function:GetCategoriesFunction/invocations"
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\r\n  \"method\": \"$context.httpMethod\",\r\n  \"body\" : \"$input.body\",\r\n  \"headers\": {\r\n    #foreach($param in $input.params().header.keySet())\r\n    \"$param\": \"$util.escapeJavaScript($input.params().header.get($param))\" #if($foreach.hasNext),#end\r\n\r\n    #end\r\n  },\r\n  \"queryParams\": {\r\n    #foreach($param in $input.params().querystring.keySet())\r\n    \"$param\": \"$util.escapeJavaScript($input.params().querystring.get($param))\" #if($foreach.hasNext),#end\r\n\r\n    #end\r\n  },\r\n  \"pathParams\": {\r\n    #foreach($param in $input.params().path.keySet())\r\n    \"$param\": \"$util.escapeJavaScript($input.params().path.get($param))\" #if($foreach.hasNext),#end\r\n\r\n    #end\r\n  }  \r\n}"


#  /categories/:
#    options:
#      responses:
#        200:
#          description: "Success"
#          headers:
#            Access-Control-Allow-Headers:
#              type: string
#            Access-Control-Allow-Methods:
#              type: string
#            Access-Control-Allow-Origin:
#              type: string
#          schema:
#            $ref: "#/definitions/Empty"
#      x-amazon-apigateway-integration:
#        type: "mock"
#        httpMethod: "POST"
#        responses:
#          default:
#            statusCode: 200
#            responseParameters:
#              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
#              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
#              method.response.header.Access-Control-Allow-Origin: "'*'"
#
#    get:
#      tags:
#        - "get categories"
#      description: "Returns all categories "
#      operationId: "getCategories"
#      produces:
#        - "application/json"
#      responses:
#        200:
#          description: "Success"
#          schema:
#            $ref: "#/definitions/Audio"
#        400:
#          description: "Bad Request"
#        401:
#          description: "Unauthorized"
#        404:
#          description: "Not Found"
#        500:
#          description: "Internal Server Error"
#      # For AWS Integration
#      x-amazon-apigateway-request-validators:
#        basic:
#          validateRequestParameters: true
#      x-amazon-apigateway-integration:
#        type: "aws"
#        httpMethod: "POST"
#        # Replace AWS_REGION and ACCOUNT_ID in uri
#        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:710339184759:function:GetCategoriesFunction/invocations"
#        responses:
#          default:
#            statusCode: 200
#            responseParameters:
#              method.response.header.Access-Control-Allow-Origin: "'*'"
#        requestTemplates:
#          application/json: "{}"

definitions:
  Empty:
    type: object
    title: Empty Schema
  Transcription:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      userID:
        type: "string"